@page "/treeviewpage"

<PageTitle>TreeViewPage</PageTitle>

<TelerikTreeView Data="@TreeViewData"
@*#if (Selection)
                 SelectionMode="@TreeViewSelectionMode.Multiple"
                 @bind-SelectedItems="@TreeViewSelectedItems"
##endif*@
@*#if (Checkboxes)
                 CheckBoxMode="@TreeViewCheckBoxMode.Multiple"
                 @bind-CheckedItems="@TreeViewCheckedItems"
                 CheckChildren="true"
                 CheckParents="true"
##endif*@
                 @bind-ExpandedItems="@TreeViewExpandedItems" />

@code {
    private List<TreeItem> TreeViewData { get; set; } = new();

    private IEnumerable<object> TreeViewExpandedItems { get; set; } = new List<TreeItem>();
@*#if (Selection)
    private IEnumerable<object> TreeViewSelectedItems { get; set; } = new List<TreeItem>();
##endif*@
@*#if (Checkboxes)
    private IEnumerable<object> TreeViewCheckedItems { get; set; } = new List<TreeItem>();
##endif*@

    private int LastId { get; set; }

    private int Levels { get; set; } = TVAR_LEVELS;
    private int Children { get; set; } = TVAR_CHILDREN;
    private int RootItems { get; set; } = TVAR_ROOTITEMS;

    protected override void OnInitialized()
    {
@*#if (Data == "Flat")
        TreeViewData = LoadTreeViewData();

        TreeViewExpandedItems = TreeViewData.Where(x => x.HasChildren == true && x.ParentId == null);
@*#if (Selection)
        TreeViewSelectedItems = TreeViewData.Where(x => x.HasChildren == true && x.ParentId == null);
##endif*@
@*#if (Checkboxes)
        TreeViewCheckedItems = TreeViewData.Where(x => x.HasChildren == true && x.ParentId == null);
##endif*@
##endif*@
@*#if (Data == "Hierarchical")
        TreeViewData = LoadTreeViewData();

        TreeViewExpandedItems = new List<TreeItem>(TreeViewData);
@*#if (Selection)
        TreeViewSelectedItems = new List<TreeItem>(TreeViewData);
##endif*@
@*#if (Checkboxes)
        TreeViewCheckedItems = new List<TreeItem>(TreeViewData);
##endif*@
##endif*@
    }

@*#if (Data == "Flat")
    private List<TreeItem> LoadTreeViewData()
    {
        List<TreeItem> items = new List<TreeItem>();

        PopulateTreeItems(items, null, 1);

        return items;
    }

    private void PopulateTreeItems(List<TreeItem> items, int? parentId, int level)
    {
        var itemCount = level == 1 ? RootItems : Children;
        for (int i = 1; i <= itemCount; i++)
        {
            var itemId = ++LastId;
            items.Add(new TreeItem()
            {
                Id = itemId,
                Text = $"Level {level} Item {i} Id {itemId}",
                ParentId = parentId,
                HasChildren = level < Levels
            });

            if (level < Levels)
            {
                PopulateTreeItems(items, itemId, level + 1);
            }
        }
    }
##else
    private List<TreeItem> LoadTreeViewData()
    {
        List<TreeItem> items = new List<TreeItem>();

        PopulateTreeItems(items, 1);

        return items;
    }

    private void PopulateTreeItems(List<TreeItem> items, int level)
    {
        for (int i = 1; i <= (level == 1 ? RootItems : Children); i++)
        {
            var itemId = ++LastId;

            var newItem = new TreeItem()
            {
                Id = itemId,
                Text = $"Level {level} Item {i} Id {itemId}"
            };

            items.Add(newItem);
        }

        if (level < Levels)
        {
            CreateTreeChildren(items, level + 1);
        }
    }

    private void CreateTreeChildren(List<TreeItem> items, int level)
    {
        foreach (var item in items)
        {
            item.Items = new List<TreeItem>();

            PopulateTreeItems(item.Items, level);
        }
    }
##endif*@

    public class TreeItem
    {
        public int Id { get; set; }
@*#if (Data == "Flat")
        public int? ParentId { get; set; }
        public bool HasChildren { get; set; }
##endif*@
        public string Text { get; set; } = string.Empty;
        public object? Icon { get; set; }
@*#if (Data == "Hierarchical")
        public List<TreeItem>? Items { get; set; }
##endif*@
    }
}